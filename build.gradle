plugins {
	id 'java'
	id 'jacoco'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.luisjrz96'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	checkstyleConfig
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	//runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// MapStruct
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// Apache
	implementation 'org.apache.commons:commons-lang3:3.0'

	// Testing
	testImplementation 'org.mockito:mockito-core:5.4.0'

}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.8"
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled(true)
		html.enabled(true)
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: ['com/luisjrz96/blog/BlogApplication',
				'com/luisjrz96/blog/data/dto/**', 'com/luisjrz96/blog/data/exception/**'])
		}))
	}
}

dependencies {

    testImplementation 'junit:junit:4.13.1'
    checkstyleConfig("com.puppycrawl.tools:checkstyle:8.29") { transitive = false }
}

checkstyle {
	toolVersion '8.29'
	config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
}